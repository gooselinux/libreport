From 3a571d68e0f074cdab9734098554ff291e7d0ad0 Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <dvlasenk@redhat.com>
Date: Fri, 21 Oct 2011 15:48:34 +0200
Subject: [PATCH 2/4] abrt_rh_support/abrt_curl: send hint data as raw
 tarball, not a form

Run-tested from command-line and in GUI.

Signed-off-by: Denys Vlasenko <dvlasenk@redhat.com>
---
 src/lib/abrt_curl.c           |   24 +++++++++++++++++++++---
 src/plugins/abrt_rh_support.c |   31 +++++++++++++++++++++++++------
 2 files changed, 46 insertions(+), 9 deletions(-)

diff --git a/src/lib/abrt_curl.c b/src/lib/abrt_curl.c
index 9831862..8d58544 100644
--- a/src/lib/abrt_curl.c
+++ b/src/lib/abrt_curl.c
@@ -64,6 +64,17 @@ xcurl_easy_setopt_long(CURL *handle, CURLoption option, long parameter)
     xcurl_easy_setopt_ptr(handle, option, (void*)parameter);
 }
 
+static void
+xcurl_easy_setopt_off_t(CURL *handle, CURLoption option, curl_off_t parameter)
+{
+    /* Can't reuse xcurl_easy_setopt_ptr: paramter is too wide */
+    CURLcode err = curl_easy_setopt(handle, option, parameter);
+    if (err) {
+        char *msg = check_curl_error(err, "curl");
+        error_msg_and_die("%s", msg);
+    }
+}
+
 /*
  * post_state utility functions
  */
@@ -279,6 +290,12 @@ abrt_post(abrt_post_state_t *state,
         xcurl_easy_setopt_ptr(handle, CURLOPT_READDATA, data_file);
         // Want to use custom read function
         xcurl_easy_setopt_ptr(handle, CURLOPT_READFUNCTION, (const void*)fread_with_reporting);
+        // Without this, curl would send "Content-Length: -1"
+        // servers don't like that: "413 Request Entity Too Large"
+        fseeko(data_file, 0, SEEK_END);
+        off_t sz = ftello(data_file);
+        fseeko(data_file, 0, SEEK_SET);
+        xcurl_easy_setopt_off_t(handle, CURLOPT_POSTFIELDSIZE_LARGE, sz);
     } else if (data_size == ABRT_POST_DATA_FROMFILE_AS_FORM_DATA) {
         // ...from a file, in multipart/formdata format
         const char *basename = strrchr(data, '/');
@@ -309,6 +326,7 @@ abrt_post(abrt_post_state_t *state,
                         // use CURLOPT_READFUNCTION for reading, pass data_file as its last param:
                         CURLFORM_STREAM, data_file,
                         CURLFORM_CONTENTSLENGTH, (long)sz, // a must if we use CURLFORM_STREAM option
+//FIXME: what if file size doesn't fit in long?
                         CURLFORM_CONTENTTYPE, content_type,
                         CURLFORM_FILENAME, basename, // filename to put in the form
                         CURLFORM_END);
@@ -322,9 +340,9 @@ abrt_post(abrt_post_state_t *state,
         xcurl_easy_setopt_ptr(handle, CURLOPT_POSTFIELDS, data);
         // note1: if data_size == ABRT_POST_DATA_STRING == -1, curl will use strlen(data)
         xcurl_easy_setopt_long(handle, CURLOPT_POSTFIELDSIZE, data_size);
-        // note2: CURLOPT_POSTFIELDSIZE_LARGE can't be used: xcurl_easy_setopt_long()
-        // truncates data_size on 32-bit arch. Need xcurl_easy_setopt_long_long()?
-        // Also, I'm not sure CURLOPT_POSTFIELDSIZE_LARGE special-cases -1.
+        // We don't use CURLOPT_POSTFIELDSIZE_LARGE because
+        // I'm not sure CURLOPT_POSTFIELDSIZE_LARGE special-cases -1.
+        // Not a big problem: memory blobs >4GB are very unlikely.
     }
 
     struct curl_slist *httpheader_list = NULL;
diff --git a/src/plugins/abrt_rh_support.c b/src/plugins/abrt_rh_support.c
index 52bfd58..56aa1a6 100644
--- a/src/plugins/abrt_rh_support.c
+++ b/src/plugins/abrt_rh_support.c
@@ -427,6 +427,7 @@ post_file_to_url(const char* url,
                 const char* username,
                 const char* password,
                 bool ssl_verify,
+                bool post_as_form,
                 const char **additional_headers,
                 const char *file_name)
 {
@@ -446,12 +447,28 @@ post_file_to_url(const char* url,
     );
     atch_state->username = username;
     atch_state->password = password;
-    abrt_post_file_as_form(atch_state,
-        url,
-        "application/binary",
-        additional_headers,
-        file_name
-    );
+    if (post_as_form)
+    {
+        /* Sends data in multipart/mixed document. One detail is that
+	 * file *name* is also sent to the server.
+	 */
+        abrt_post_file_as_form(atch_state,
+            url,
+            "application/octet-stream",
+            additional_headers,
+            file_name
+        );
+    }
+    else
+    {
+        /* Sends file's raw contents */
+        abrt_post_file(atch_state,
+            url,
+            "application/octet-stream",
+            additional_headers,
+            file_name
+        );
+    }
 
     char *atch_location = find_header_in_abrt_post_state(atch_state, "Location:");
 
@@ -560,6 +577,7 @@ get_rhts_hints(const char* base_url,
                 username,
                 password,
                 ssl_verify,
+                /*post_as_form:*/ false,
                 /*headers:*/ NULL,
                 file_name
     );
@@ -579,6 +597,7 @@ attach_file_to_case(const char* base_url,
                 username,
                 password,
                 ssl_verify,
+                /*post_as_form:*/ true,
                 (const char **) text_plain_header,
                 file_name
     );
-- 
1.7.6.4

