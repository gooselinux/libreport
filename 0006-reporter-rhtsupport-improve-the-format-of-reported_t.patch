From a2f87ee5fd7627657e2d36242036778c3bf1073d Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <dvlasenk@redhat.com>
Date: Tue, 2 Aug 2011 16:38:11 +0200
Subject: [PATCH 06/13] reporter-rhtsupport: improve the format of reported_to
 line

We need easily parseable URL there.
While at it, added TIME=iso_time there.

Signed-off-by: Denys Vlasenko <dvlasenk@redhat.com>
---
 src/plugins/abrt_rh_support.c     |   43 ++++++++++-----
 src/plugins/abrt_rh_support.h     |   16 ++++-
 src/plugins/reporter-rhtsupport.c |  113 ++++++++++++++++++++-----------------
 3 files changed, 103 insertions(+), 69 deletions(-)

diff --git a/src/plugins/abrt_rh_support.c b/src/plugins/abrt_rh_support.c
index 8f92af7..7862025 100644
--- a/src/plugins/abrt_rh_support.c
+++ b/src/plugins/abrt_rh_support.c
@@ -201,7 +201,7 @@ reportfile_as_string(reportfile_t* file)
 }
 
 void
-reportfile_free(reportfile_t* file)
+free_reportfile(reportfile_t* file)
 {
     if (!file)
         return;
@@ -211,6 +211,15 @@ reportfile_free(reportfile_t* file)
 }
 
 
+void free_rhts_result(rhts_result_t *p)
+{
+    if (!p)
+        return;
+    free(p->url);
+    free(p->msg);
+    free(p);
+}
+
 //
 // send_report_to_new_case()
 //
@@ -292,7 +301,7 @@ make_response(const char* title, const char* body,
 //<response><title>Case Created and Report Attached</title><body></body><URL href="http://support-services-devel.gss.redhat.com:8080/Strata/cases/00005129/attachments/ccbf3e65-b941-3db7-a016-6a3831691a32">New Case URL</URL></response>
 #endif
 
-char*
+rhts_result_t*
 send_report_to_new_case(const char* baseURL,
                 const char* username,
                 const char* password,
@@ -302,6 +311,8 @@ send_report_to_new_case(const char* baseURL,
                 const char* component,
                 const char* report_file_name)
 {
+    rhts_result_t *result = xzalloc(sizeof(*result));
+
     char *case_url = concat_path_file(baseURL, "/cases");
 
     char *case_data = make_case_data(summary, description,
@@ -311,7 +322,6 @@ send_report_to_new_case(const char* baseURL,
     int redirect_count = 0;
     char *errmsg;
     char *allocated = NULL;
-    char* retval = NULL;
     abrt_post_state_t *case_state;
 
  redirect_case:
@@ -339,7 +349,8 @@ send_report_to_new_case(const char* baseURL,
          * but makes this typical error less cryptic:
          * instead of returning html-encoded body, we show short concise message,
          * and show offending URL (typos in which is a typical cause) */
-        retval = xasprintf("error in case creation, "
+        result->error = -1;
+        result->msg = xasprintf("error in case creation, "
                         "HTTP code: 404 (Not found), URL:'%s'", case_url);
         break;
 
@@ -356,17 +367,20 @@ send_report_to_new_case(const char* baseURL,
         /* fall through */
 
     default:
+        result->error = -1;
         errmsg = case_state->curl_error_msg;
         if (errmsg && errmsg[0])
-            retval = xasprintf("error in case creation: %s", errmsg);
+        {
+            result->msg = xasprintf("error in case creation: %s", errmsg);
+        }
         else
         {
             errmsg = case_state->body;
             if (errmsg && errmsg[0])
-                retval = xasprintf("error in case creation, HTTP code: %d, server says: '%s'",
+                result->msg = xasprintf("error in case creation, HTTP code: %d, server says: '%s'",
                         case_state->http_resp_code, errmsg);
             else
-                retval = xasprintf("error in case creation, HTTP code: %d",
+                result->msg = xasprintf("error in case creation, HTTP code: %d",
                         case_state->http_resp_code);
         }
         break;
@@ -375,7 +389,8 @@ send_report_to_new_case(const char* baseURL,
     case 201: {
         if (!case_location) {
             /* Case Creation returned valid code, but no location */
-            retval = xasprintf("error in case creation: no Location URL, HTTP code: %d",
+            result->error = -1;
+            result->msg = xasprintf("error in case creation: no Location URL, HTTP code: %d",
                     case_state->http_resp_code);
             break;
         }
@@ -422,10 +437,9 @@ send_report_to_new_case(const char* baseURL,
                 else /* only body exists */
                     errmsg = atch_state->body;
             }
-            /* Note: to prevent URL misparsing, make sure to delimit
-             * case_location only using spaces */
-            retval = xasprintf("Case created: %s but report attachment failed (HTTP code %d)%s%s",
-                    case_location,
+            result->error = -1;
+            result->url = xstrdup(case_location);
+            result->msg = xasprintf("Case created but report attachment failed (HTTP code %d)%s%s",
                     atch_state->http_resp_code,
                     errmsg ? ": " : "",
                     errmsg ? errmsg : ""
@@ -444,7 +458,8 @@ send_report_to_new_case(const char* baseURL,
             //                case_state->body,
             //                atch_state->body);
             //}
-            retval = xasprintf("Case created: %s", /*body,*/ case_location);
+            result->url = xstrdup(case_location);
+            result->msg = xstrdup("Case created");
         } /* switch (attach HTTP code) */
 
         free_abrt_post_state(atch_state);
@@ -456,5 +471,5 @@ send_report_to_new_case(const char* baseURL,
     free_abrt_post_state(case_state);
     free(allocated);
     free(case_url);
-    return retval;
+    return result;
 }
diff --git a/src/plugins/abrt_rh_support.h b/src/plugins/abrt_rh_support.h
index db6e9cd..dd0036d 100644
--- a/src/plugins/abrt_rh_support.h
+++ b/src/plugins/abrt_rh_support.h
@@ -23,10 +23,11 @@
 extern "C" {
 #endif
 
+/* Opaque struct */
 typedef struct reportfile reportfile_t;
 
 reportfile_t *new_reportfile(void);
-void reportfile_free(reportfile_t* file);
+void free_reportfile(reportfile_t* file);
 
 void reportfile_add_binding_from_string(reportfile_t* file, const char* name, const char* value);
 void reportfile_add_binding_from_namedfile(reportfile_t* file,
@@ -37,8 +38,17 @@ void reportfile_add_binding_from_namedfile(reportfile_t* file,
 
 const char* reportfile_as_string(reportfile_t* file);
 
-char* post_signature(const char* baseURL, bool ssl_verify, const char* signature);
-char*
+/* Used to return result of RHTS submission */
+struct rhts_result {
+    int error; /* 0: no error; else: error code, msg contains error msg. */
+    char *msg;
+    char *url; /* URL to created case, or NULL */
+};
+typedef struct rhts_result rhts_result_t;
+
+void free_rhts_result(rhts_result_t *p);
+
+rhts_result_t*
 send_report_to_new_case(const char* baseURL,
                 const char* username,
                 const char* password,
diff --git a/src/plugins/reporter-rhtsupport.c b/src/plugins/reporter-rhtsupport.c
index 4f6d2b6..fbd5db1 100644
--- a/src/plugins/reporter-rhtsupport.c
+++ b/src/plugins/reporter-rhtsupport.c
@@ -38,6 +38,7 @@ static void report_to_rhtsupport(
     pid_t child;
     char* tempfile = NULL;
     reportfile_t* file = NULL;
+    rhts_result_t* result = NULL;
     char* dsc = NULL;
     char* summary = NULL;
     const char* function;
@@ -112,7 +113,7 @@ static void report_to_rhtsupport(
     if (tar_fdopen(&tar, pipe_from_parent_to_child[1], tempfile,
                 /*fileops:(standard)*/ NULL, O_WRONLY | O_CREAT, 0644, TAR_GNU) != 0)
     {
-        errmsg = "Can't create temporary file in /tmp";
+        errmsg = _("Can't create temporary file in /tmp");
         goto ret;
     }
 
@@ -146,7 +147,7 @@ static void report_to_rhtsupport(
                         /*binary           */ 1);
                 if (tar_append_file(tar, (char*)content, xml_name) != 0)
                 {
-                    errmsg = "Can't create temporary file in /tmp";
+                    errmsg = _("Can't create temporary file in /tmp");
                     free(xml_name);
                     goto ret;
                 }
@@ -180,7 +181,7 @@ static void report_to_rhtsupport(
          || tar_close(tar) != 0
         ) {
             free(block);
-            errmsg = "Can't create temporary file in /tmp";
+            errmsg = _("Can't create temporary file in /tmp");
             goto ret;
         }
         tar = NULL;
@@ -196,61 +197,64 @@ static void report_to_rhtsupport(
         /* Hopefully, by this time child emitted more meaningful
          * error message. But just in case it didn't:
          */
-        errmsg = "Can't create temporary file in /tmp";
+        errmsg = _("Can't create temporary file in /tmp");
         goto ret;
     }
 
     /* Send tempfile */
+    log(_("Creating a new case..."));
+    result = send_report_to_new_case(url,
+            login,
+            password,
+            ssl_verify,
+            summary,
+            dsc,
+            package,
+            tempfile
+    );
+
+    if (result->error)
     {
-        log(_("Creating a new case..."));
-        char* result = send_report_to_new_case(url,
-                login,
-                password,
-                ssl_verify,
-                summary,
-                dsc,
-                package,
-                tempfile
-        );
-        /* Temporary hackish detection of errors. Ideally,
-         * send_report_to_new_case needs to have better error reporting.
+        /*
+         * Message can contain "...server says: 'multi-line <html> text'"
+         * Replace all '\n' with spaces:
+         * we want this message to be, logically, one log entry.
+         * IOW: one line, not many lines.
          */
-        if (strncasecmp(result, "error", 5) == 0)
+        char *src, *dst;
+        errmsg = dst = src = result->msg;
+        while (1)
         {
-            /*
-             * result can contain "...server says: 'multi-line <html> text'"
-             * Replace all '\n' with spaces:
-             * we want this message to be, logically, one log entry.
-             * IOW: one line, not many lines.
-             */
-            char *src, *dst;
-            dst = src = result;
-            while (1)
-            {
-                unsigned char c = *src++;
-                if (c == '\n')
-                    c = ' ';
-                *dst++ = c;
-                if (c == '\0')
-                    break;
-            }
-            /* Use sanitized string as error message */
-            errmsg = result;
-            goto ret;
+            unsigned char c = *src++;
+            if (c == '\n')
+                c = ' ';
+            *dst++ = c;
+            if (c == '\0')
+                break;
         }
+        /* Remove trailing spaces (usually produced by trailing '\n') */
+        while (--dst >= errmsg && *dst == ' ')
+            *dst = '\0';
+        goto ret;
+    }
 
-        /* No error */
-        struct dump_dir *dd = dd_opendir(dump_dir_name, /*flags:*/ 0);
-        if (dd)
-        {
-            char *msg = xasprintf("RHTSupport: %s", result);
-            add_reported_to(dd, msg);
-            free(msg);
-            dd_close(dd);
-        }
-        log("%s", result);
-        free(result);
+    /* No error */
+    struct dump_dir *dd = dd_opendir(dump_dir_name, /*flags:*/ 0);
+    if (dd)
+    {
+        char *msg = xasprintf("RHTSupport: TIME=%s URL=%s%s%s",
+                iso_date_string(NULL),
+                result->url,
+                result->msg ? " MSG=" : "", result->msg ? result->msg : ""
+        );
+        add_reported_to(dd, msg);
+        free(msg);
+        dd_close(dd);
+        if (result->msg)
+            log("%s", result->msg);
+        log("URL=%s", result->url);
     }
+    /* else: error msg was already emitted by dd_opendir */
 
  ret:
     /* We must close write fd first, or else child will wait forever */
@@ -268,19 +272,24 @@ static void report_to_rhtsupport(
 
     unlink(tempfile);
     free(tempfile);
-    reportfile_free(file);
+    free_reportfile(file);
     rmdir(tmpdir_name);
 
+    /* Note: errmsg may be = result->msg, don't move this code block
+     * below free_rhts_result(result)!
+     */
+    if (errmsg)
+        error_msg_and_die("%s", errmsg);
+
     free(summary);
     free(dsc);
 
+    free_rhts_result(result);
+
     free(url);
     free(login);
     free(password);
     free_problem_data(problem_data);
-
-    if (errmsg)
-        error_msg_and_die("%s", errmsg);
 }
 
 int main(int argc, char **argv)
-- 
1.7.6

